# Summary del modelo
output$summaryOut <- renderPrint({
fit <- cfaModel()
req(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
})
# Fit measures según estimador
output$fitMeasures <- renderTable({
fit <- cfaModel()
req(fit)
indices <- switch(input$estimator,
"ML"    = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"),
"MLR"   = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"WLSMV" = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"ULS"   = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"))
pretty_names <- c(
"chisq" = "\u03C7\u00B2",
"chisq.scaled" = "\u03C7\u00B2",
"df" = "gl",
"df.scaled" = "gl",
"rmsea" = "RMSEA",
"rmsea.scaled" = "RMSEA",
"srmr" = "SRMR",
"cfi" = "CFI",
"cfi.scaled" = "CFI",
"tli" = "TLI",
"tli.scaled" = "TLI"
)
fm <- fitMeasures(fit, indices)
labels <- pretty_names[indices]
labels[is.na(labels)] <- indices[is.na(labels)]
data.frame(
`Fit Index` = labels,
`Value` = round(as.numeric(fm), 3)
)
})
# Descargar tabla
output$download_fitmeasures <- downloadHandler(
filename = function() {
paste0("fit_measures_", Sys.Date(), ".xlsx")
},
content = function(file) {
fit <- cfaModel()
req(fit)
indices <- switch(input$estimator,
"ML"    = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"),
"MLR"   = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"WLSMV" = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"ULS"   = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"))
pretty_names <- c(
"chisq" = "\u03C7\u00B2",
"chisq.scaled" = "\u03C7\u00B2",
"df" = "gl",
"df.scaled" = "gl",
"rmsea" = "RMSEA",
"rmsea.scaled" = "RMSEA",
"srmr" = "SRMR",
"cfi" = "CFI",
"cfi.scaled" = "CFI",
"tli" = "TLI",
"tli.scaled" = "TLI"
)
fm <- fitMeasures(fit, indices)
labels <- pretty_names[indices]
labels[is.na(labels)] <- indices[is.na(labels)]
tabla <- data.frame(
`Fit Index` = labels,
`Value` = round(as.numeric(fm), 3)
)
openxlsx::write.xlsx(tabla, file)
}
)
# Índices de modificación
output$modIndices <- DT::renderDT({
fit <- cfaModel()
req(fit)
modindices(fit, minimum.value = 10, sort = TRUE)
})
# Plot CFA
plotCFA <- eventReactive(input$plotButton, {
fit <- cfaModel()
req(fit)
bifactor <- input$bifactorName
layout_type <- ifelse(bifactor != "", "tree3", "tree2")
semPaths(
fit,
what = "std",
weighted = FALSE,
layout = layout_type,
bifactor = if (bifactor != "") bifactor else NULL,
rotation = 2,
sizeLat = input$sizeLat,
sizeMan = input$sizeMan,
sizeMan2 = input$sizeMan2,
curve = input$curve,
residuals = FALSE,
edge.label.cex = input$labelSize,
edge.color = "#474747",
intercepts = FALSE,
thresholds = FALSE,
label.cex = input$labelSize,
mar = c(2, 7, 2, 7),
style = "lisrel",
label.prop = 1
)
})
output$cfaPlot <- renderPlot({
req(plotCFA())
plotCFA()
})
output$download_cfa_plot <- downloadHandler(
filename = function() { "cfa_plot.jpg" },
content = function(file) {
req(cfaModel())
semPlot::semPaths(
cfaModel(),
what = "std",
weighted = FALSE,
layout = ifelse(input$bifactorName != "", "tree3", "tree2"),
bifactor = if (input$bifactorName != "") input$bifactorName else NULL,
rotation = 2,
sizeLat = input$sizeLat,
sizeMan = input$sizeMan,
sizeMan2 = input$sizeMan2,
curve = input$curve,
residuals = FALSE,
edge.label.cex = input$labelSize,
edge.color = "#474747",
intercepts = FALSE,
thresholds = FALSE,
label.cex = input$labelSize,
mar = c(2, 7, 2, 7),
style = "lisrel",
label.prop = 1,
)
grDevices::dev.copy(jpeg, filename = file,
width = input$plot_width,
height = input$plot_height,
units = "in",
res = input$plot_dpi)
dev.off()
}
)
# Fiabilidad
output$omegaTable <- renderTable({
fit <- cfaModel()
req(fit)
reliability(fit, what = "omega")
})
# Índices si el modelo es bifactor
output$bifactorIndices <- renderTable({
fit <- cfaModel()
req(fit)
# Nombre del factor general desde input
general_factor <- input$bifactorName
# Nombres de factores latentes
factors <- lavNames(fit, type = "lv")
# Obtener la matriz de cargas estandarizadas
loadings <- inspect(fit, "std")$lambda
# ✅ Ver cuántos factores carga cada ítem con un umbral (evita ruido)
load_count <- rowSums(abs(loadings) > 0.20)
# Criterios mínimos para bifactor
is_candidate <- length(factors) > 1 &&
general_factor %in% colnames(loadings) &&
all(load_count == 2)
if (is_candidate) {
tryCatch({
bif_indices <- BifactorIndicesCalculator::bifactorIndices(fit)
round(bif_indices$ModelLevelIndices, 3)  # puedes cambiar aquí el nivel
}, error = function(e) {
data.frame(Error = paste("Error en cálculo:", e$message))
})
} else {
data.frame(
Mensaje = "Este modelo no cumple con los criterios estructurales para un modelo bifactor.",
Criterios = "Cada ítem debe cargar en un factor general y uno específico con carga > .20."
)
}
})
# Bifactor output
output$bifactorItems <- renderTable({
req(cfaModel())
tryCatch({
round(BifactorIndicesCalculator::bifactorIndices(cfaModel())$ItemLevelIndices, 3)
}, error = function(e) {
data.frame(Error = e$message)
})
})
output$bifactorFactors <- renderTable({
req(cfaModel())
tryCatch({
tabla <- round(BifactorIndicesCalculator::bifactorIndices(cfaModel())$FactorLevelIndices, 3)
data.frame(
Factor = rownames(tabla),  # convierte nombres de fila en columna
tabla,
row.names = NULL,
check.names = FALSE
)
}, error = function(e) {
data.frame(Error = e$message)
})
})
# Puntos de corte bifactor
output$bifactorPuntosCorte <- renderUI({
tagList(
h4("Guía de interpretación de índices bifactor"),
tags$table(class = "table table-striped",
tags$thead(
tags$tr(
tags$th("Nivel"), tags$th("Índice"), tags$th("Descripción"), tags$th("Punto de corte")
)
),
tags$tbody(
# Nivel del modelo
tags$tr(tags$td("Modelo"), tags$td("ECV (FG)"), tags$td("Varianza común explicada por el factor general (ECV_SS)"), tags$td("≥ .70 – .80")),
tags$tr(tags$td("Modelo"), tags$td("OmegaH (FG)"), tags$td("Confiabilidad jerárquica del factor general"), tags$td("≥ .75 – .80")),
# Nivel del factor
tags$tr(tags$td("Factor"), tags$td("OmegaH"), tags$td("Confiabilidad jerárquica por factor específico"), tags$td("≥ .75")),
tags$tr(tags$td("Factor"), tags$td("H"), tags$td("Replicabilidad de las puntuaciones del factor"), tags$td("≥ .70")),
# Nivel del ítem
tags$tr(tags$td("Ítem"), tags$td("IECV"), tags$td("Proporción de varianza del ítem explicada por el factor general"), tags$td("≥ .85"))
)
),
br(),
tags$em("Para una mejor comprensión, se recomienda consultar los trabajos de Rodriguez et al. (2016) y Domínguez-Lara y Rodríguez (2016). Los puntos de corte deben considerarse orientativos y no absolutos.")
)
})
# Bootstrapping
boot_results <- eventReactive(input$run_boot, {
tryCatch({
PsyMetricTools::boot_cfa(
new_df = filtered_data(),
model_string = input$modelText,
item_prefix = input$prefixItems,
seed = 2025,
n_replications = input$n_boot,
ordered = input$ordered,
estimator = input$boot_estimator
)
}, error = function(e) {
showNotification(paste("Bootstrap error:", e$message), type = "error")
NULL
})
})
output$bootstrapPlot <- renderPlot({
req(boot_results())
PsyMetricTools::boot_cfa_plot(
boot_results(),
save = FALSE,
omega_ymin_annot = input$omega_ymin,
omega_ymax_annot = input$omega_ymax,
comp_ymin_annot  = input$comp_ymin,
comp_ymax_annot  = input$comp_ymax,
abs_ymin_annot   = input$abs_ymin,
abs_ymax_annot   = input$abs_ymax
)
})
# Plot en bootstrap
output$download_boot_plot <- downloadHandler(
filename = function() {"bootstrap_plot.jpg"},
content = function(file) {
p <- PsyMetricTools::boot_cfa_plot(
boot_results(),
save = FALSE,
omega_ymin_annot = input$omega_ymin,
omega_ymax_annot = input$omega_ymax,
comp_ymin_annot  = input$comp_ymin,
comp_ymax_annot  = input$comp_ymax,
abs_ymin_annot   = input$abs_ymin,
abs_ymax_annot   = input$abs_ymax
)
ggsave(
filename = file,
plot = p,
width = input$boot_plot_width,
height = input$boot_plot_height,
dpi = input$boot_plot_dpi
)
}
)
# Validez convergente (nuevo model fit con full_data)
validityModel <- eventReactive(input$runValid, {
req(input$validityModelText)
tryCatch({
cfa(input$validityModelText,
data = full_data(),
estimator = input$estimator,
ordered = if (input$ordered) TRUE else NULL)
}, error = function(e) {
showNotification(paste("Error in validity model:", e$message), type = "error")
NULL
})
})
output$validityPlot <- renderPlot({
fit <- validityModel()
req(fit)
layout_type <- ifelse(input$valid_bifactorName != "", "tree3", "tree2")
semPaths(
fit,
what = "std",
weighted = FALSE,
layout = layout_type,
bifactor = if (input$valid_bifactorName != "") input$valid_bifactorName else NULL,
rotation = 2,
sizeLat = input$valid_sizeLat,
sizeMan = input$valid_sizeMan,
sizeMan2 = input$valid_sizeMan2,
curve = input$curve,
residuals = FALSE,
edge.label.cex = input$valid_labelSize,
edge.color = "#474747",
intercepts = FALSE,
thresholds = FALSE,
label.cex = input$valid_labelSize,
mar = c(2, 7, 2, 7),
style = "lisrel",
label.prop = 1
)
})
output$validityFit <- renderTable({
fit <- validityModel()
req(fit)
estimator <- input$estimator
indices <- switch(estimator,
"ML"    = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"),
"MLR"   = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"WLSMV" = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"ULS"   = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"))
pretty_names <- c(
"chisq" = "\u03C7\u00B2", "chisq.scaled" = "\u03C7\u00B2",
"df" = "gl",              "df.scaled" = "gl",
"rmsea" = "RMSEA",        "rmsea.scaled" = "RMSEA",
"srmr" = "SRMR",
"cfi" = "CFI",            "cfi.scaled" = "CFI",
"tli" = "TLI",            "tli.scaled" = "TLI"
)
fm <- fitMeasures(fit, indices)
labels <- pretty_names[indices]
labels[is.na(labels)] <- indices[is.na(labels)]
data.frame(
`Fit Index` = labels,
`Value` = round(as.numeric(fm), 3)
)
})
output$validityMI <- DT::renderDT({
fit <- validityModel()
req(fit)
modindices(fit, minimum.value = 10, sort = TRUE)
})
output$download_validity_fit <- downloadHandler(
filename = function() {
paste0("validity_fit_measures_", Sys.Date(), ".xlsx")
},
content = function(file) {
fit <- validityModel()
req(fit)
estimator <- input$estimator
indices <- switch(estimator,
"ML"    = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"),
"MLR"   = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"WLSMV" = c("chisq.scaled", "df.scaled", "rmsea.scaled", "srmr", "cfi.scaled", "tli.scaled"),
"ULS"   = c("chisq", "df", "rmsea", "srmr", "cfi", "tli"))
pretty_names <- c(
"chisq" = "\u03C7\u00B2", "chisq.scaled" = "\u03C7\u00B2",
"df" = "gl",              "df.scaled" = "gl",
"rmsea" = "RMSEA",        "rmsea.scaled" = "RMSEA",
"srmr" = "SRMR",
"cfi" = "CFI",            "cfi.scaled" = "CFI",
"tli" = "TLI",            "tli.scaled" = "TLI"
)
fm <- fitMeasures(fit, indices)
labels <- pretty_names[indices]
labels[is.na(labels)] <- indices[is.na(labels)]
tabla <- data.frame(
`Fit Index` = labels,
`Value` = round(as.numeric(fm), 3)
)
# Estilo profesional
wb <- openxlsx::createWorkbook()
openxlsx::addWorksheet(wb, "Fit Measures")
openxlsx::writeData(wb, "Fit Measures", tabla, startRow = 1, startCol = 1, headerStyle = openxlsx::createStyle(textDecoration = "bold"))
openxlsx::setColWidths(wb, "Fit Measures", cols = 1:2, widths = "auto")
openxlsx::saveWorkbook(wb, file, overwrite = TRUE)
}
)
output$download_valid_plot <- downloadHandler(
filename = function() {
paste0("validity_plot_", Sys.Date(), ".jpg")
},
content = function(file) {
fit <- validityModel()
req(fit)
layout_type <- ifelse(input$valid_bifactorName != "", "tree3", "tree2")
jpeg(file, width = 10, height = 8, units = "in", res = 300)
semPaths(
fit,
what = "std",
weighted = FALSE,
layout = layout_type,
bifactor = if (input$valid_bifactorName != "") input$valid_bifactorName else NULL,
rotation = 2,
sizeLat = input$valid_sizeLat,
sizeMan = input$valid_sizeMan,
sizeMan2 = input$valid_sizeMan2,
curve = input$curve,
residuals = FALSE,
edge.label.cex = input$valid_labelSize,
edge.color = "#474747",
intercepts = FALSE,
thresholds = FALSE,
label.cex = input$valid_labelSize,
mar = c(2, 7, 2, 7),
style = "lisrel",
label.prop = 1
)
dev.off()
}
)
}
shinyApp(ui, server)
setwd("D:/01 PS CRISTOPHER LINO CRUZ/16 GITHUB/CFA SHINY")
usethis::use_git()
usethis::use_github()
usethis::use_git_message("Actualización: se añadieron referencias y mejoras en la estructura de CFA-Shiny")
usethis::use_git_message("Actualización: se añadieron referencias y mejoras en la estructura de CFA-Shiny")
system("git add .")
system('git commit -m "Actualización: se añadieron referencias y mejoras en la estructura de CFA-Shiny"')
system('git config --global user.name "Cristopher Junior Lino Cruz"')
system('git config --global user.email "cristopherlinoc@gmail.com"')
system('git commit -m "Actualización: se añadieron referencias y mejoras en la estructura de CFA-Shiny"')
system('git push')
system('git pull --rebase')
system('git push')
rsconnect::setAccountInfo(name='linocruz-cfa-app',
token='962C0BDF04007D575A44C44DD5CBF492',
secret='qYZL4LQCRF4xJyuO9seLQP9+lqHhyoXGDJUdtpoC')
library(rsconnect)
deployApp()
deployApp()
.rs.restartR()
rm(list = ls())       # Limpia el entorno
gc()                  # Limpia memoria
rm(list = ls())       # Limpia el entorno
gc()                  # Limpia memoria
rsconnect::setAccountInfo(name='linocruz-cfa-app',
token='962C0BDF04007D575A44C44DD5CBF492',
secret='qYZL4LQCRF4xJyuO9seLQP9+lqHhyoXGDJUdtpoC')
library(rsconnect)
deployApp()
rsconnect::deployApp(
appFiles = c("app.R", "CFA_Shiny.R", "README.md"),
appName = "cfa_shiny"
)
shiny::runGitHub("CFA-Shiny", "CristopherLino")
rsconnect::showLogs(appName = "cfa_shiny", account = "linocruz-cfa-app")
system('git add .')
system('git commit -m "Fix: se añadieron librerías faltantes ggpubr y labelled"')
system('git push')
library(rsconnect)
rsconnect::deployApp(
appFiles = c("app.R", "CFA_Shiny.R", "README.md"),
appName = "cfa_shiny"
)
rsconnect::showLogs(appName = "cfa_shiny", account = "linocruz-cfa-app")
library(wesanderson)
getAnywhere(PsyMetricTools::boot_cfa_plot)
getAnywhere("boot_cfa_plot")
git add .
system('git add .')
system('git commit -m "Actualización"')
system('git push')
system("git log -1")
system('git add .')
system('git commit -m "Actualización"')
system('git push')
rsconnect::deployApp(
appFiles = c("app.R", "CFA_Shiny.R", "README.md"),
appName = "cfa_shiny"
)
git status
system("git status")
system("git add app.R")
system('git commit -m "Actualización"')
system("git add .")
system('git commit -m "Eliminado comentario en CFA_Shiny.R"')
system("git push")
library(rsconnect)
rsconnect::writeManifest()
system("git add manifest.json")
system('git commit -m \"Agregado manifest.json para despliegue en Posit Connect\"')
system("git push")
system("git add .")
system('git commit -m "Corrección de codificación UTF-8"')
system("git status")
system("git status")
system("git add CFA_Shiny.R")
system('git commit -m "Corrección de codificación y limpieza de caracteres en CFA_Shiny.R"')
system("git push")
shiny::runGitHub("CFA-Shiny", "CristopherLino")
system("git add CFA_Shiny.R")
system('git commit -m "Corrección del botón de descarga de gráfico CFA"')
system("git push")
library(rsconnect)
shiny::runGitHub("CFA-Shiny", "CristopherLino")
library(rsconnect)
rsconnect::deployApp(
appFiles = c("app.R", "CFA_Shiny.R", "README.md"),
appName = "cfa_shiny"
)
system("git add .")
system('git commit -m "Actualización"')
system("git push")
